apiVersion: apps/v1
kind: Deployment
metadata:
  name: obk-controller-deply
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      # name: obk-controller
      app: obk-controller
  template:
    metadata:
      labels:
        app: obk-controller
        # name: obk-controller
    spec:
      serviceAccount: obk-controller-sa
      containers:
        - name: obk-controller
          image: obk-controller
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 3000
          env:
            - name: OBKC_LOG_LEVEL
              value: '9'
            - name: OBKC_CONSOLE
              value: 'true'
---
apiVersion: v1
kind: Service
metadata:
  name: obk-controller-svc
  namespace: default
spec:
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  selector:
    app: obk-controller
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-obk-controller
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - host: localhost
    http:
      paths:
        - path: /obk-authorizator/obk-console-authorizator
          pathType: Prefix
          backend:
            service:
              name: obk-authorizator-obk-console-authorizator-svc
              port:
                number: 3000
        - path: /obk-console
          pathType: Prefix
          backend:
            service:
              name: obk-controller-svc
              port:
                number: 3000
---
apiVersion: jfvilas.at.outlook.com/v1
kind: ObkAuthorizator
metadata:
  name: obk-console-authorizator
  namespace: default
spec:
  config:
    replicas: 1
    prometheus: false
    console: true
    api: true
    logLevel: 9
  ingress:
    name: ingress-obk-controller
    provider: ingress-nginx
    class: nginx
  validators:
    - basicAuth:
        name: obkconsole
        realm: ObkControllerConsole
        storeType: inline
        users: 
          - name: admin
            password: admin
  rulesets:
    - name: general
      uriPrefix: [ '/obk-authorizator' ]
      rules:
        - uris: [ '' ]
          uritype: prefix
          type: unrestricted
    - name: obkconsole-unprotected
      uriPrefix: [ '/obk-console' ]
      rules: 
        - uris: [ '' ]
          uritype: prefix
          type: unrestricted
---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: users
#   namespace: dev
# data:
#   db: 'e30='
# ---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: obk-authorizator-role
  namespace: dev
rules:
  # "" indicates the core API group
  - apiGroups: [ '' ]
    resources: [ 'secrets' ]
    verbs: [ 'get', 'add', 'update' ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: obk-authorizator-rolebinding
  namespace: dev
subjects:
- kind: ServiceAccount
  name: default
  namespace : dev
roleRef:
  kind: Role
  name: obk-authorizator-role
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: obk-controller-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: obk-controller-cr
  namespace: default
rules:
  # "" indicates the core API group
  - apiGroups: ["", "jfvilas.at.outlook.com", "apps", "networking.k8s.io","traefik.io"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: obk-controller-crb
  namespace: default
subjects:
- kind: ServiceAccount
  name: obk-controller-sa
  namespace : default
roleRef:
  kind: ClusterRole
  name: obk-controller-cr
